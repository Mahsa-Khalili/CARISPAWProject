// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carisPAWBuffers.proto

#include "carisPAWBuffers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class frameUnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<frameUnit> _instance;
} _frameUnit_default_instance_;
class wheelUnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<wheelUnit> _instance;
} _wheelUnit_default_instance_;
static void InitDefaultsframeUnit_carisPAWBuffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_frameUnit_default_instance_;
    new (ptr) ::frameUnit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frameUnit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_frameUnit_carisPAWBuffers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsframeUnit_carisPAWBuffers_2eproto}, {}};

static void InitDefaultswheelUnit_carisPAWBuffers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_wheelUnit_default_instance_;
    new (ptr) ::wheelUnit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wheelUnit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_wheelUnit_carisPAWBuffers_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultswheelUnit_carisPAWBuffers_2eproto}, {}};

void InitDefaults_carisPAWBuffers_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_frameUnit_carisPAWBuffers_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_wheelUnit_carisPAWBuffers_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_carisPAWBuffers_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_carisPAWBuffers_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_carisPAWBuffers_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_carisPAWBuffers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::frameUnit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frameUnit, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, isstamp_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, pitch_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, roll_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, heading_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, acc_x9250_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, acc_y9250_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, acc_z9250_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, angular_x9250_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, angular_y9250_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, angular_z9250_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, acc_x6050_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, acc_y6050_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, acc_z6050_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, angular_x6050_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, angular_y6050_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, angular_z6050_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, usensorforward_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, usensordownward_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, picamimage_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, imageheight_),
  PROTOBUF_FIELD_OFFSET(::frameUnit, imagewidth_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  0,
  20,
  21,
  PROTOBUF_FIELD_OFFSET(::wheelUnit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wheelUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wheelUnit, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::wheelUnit, isstamp_),
  PROTOBUF_FIELD_OFFSET(::wheelUnit, acc_x_),
  PROTOBUF_FIELD_OFFSET(::wheelUnit, acc_y_),
  PROTOBUF_FIELD_OFFSET(::wheelUnit, acc_z_),
  PROTOBUF_FIELD_OFFSET(::wheelUnit, angular_x_),
  PROTOBUF_FIELD_OFFSET(::wheelUnit, angular_y_),
  PROTOBUF_FIELD_OFFSET(::wheelUnit, angular_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, sizeof(::frameUnit)},
  { 49, 62, sizeof(::wheelUnit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_frameUnit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_wheelUnit_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_carisPAWBuffers_2eproto = {
  {}, AddDescriptors_carisPAWBuffers_2eproto, "carisPAWBuffers.proto", schemas,
  file_default_instances, TableStruct_carisPAWBuffers_2eproto::offsets,
  file_level_metadata_carisPAWBuffers_2eproto, 2, file_level_enum_descriptors_carisPAWBuffers_2eproto, file_level_service_descriptors_carisPAWBuffers_2eproto,
};

const char descriptor_table_protodef_carisPAWBuffers_2eproto[] =
  "\n\025carisPAWBuffers.proto\"\310\003\n\tframeUnit\022\022\n"
  "\ntime_stamp\030\001 \001(\002\022\017\n\007isStamp\030\002 \001(\010\022\r\n\005pi"
  "tch\030\003 \001(\002\022\014\n\004roll\030\004 \001(\002\022\017\n\007heading\030\005 \001(\002"
  "\022\021\n\tacc_x9250\030\006 \001(\002\022\021\n\tacc_y9250\030\007 \001(\002\022\021"
  "\n\tacc_z9250\030\010 \001(\002\022\025\n\rangular_x9250\030\t \001(\002"
  "\022\025\n\rangular_y9250\030\n \001(\002\022\025\n\rangular_z9250"
  "\030\013 \001(\002\022\021\n\tacc_x6050\030\014 \001(\002\022\021\n\tacc_y6050\030\r"
  " \001(\002\022\021\n\tacc_z6050\030\016 \001(\002\022\025\n\rangular_x6050"
  "\030\017 \001(\002\022\025\n\rangular_y6050\030\020 \001(\002\022\025\n\rangular"
  "_z6050\030\021 \001(\002\022\026\n\016USensorForward\030\022 \001(\002\022\027\n\017"
  "USensorDownward\030\023 \001(\002\022\022\n\npiCamImage\030\024 \001("
  "\014\022\023\n\013imageHeight\030\025 \001(\005\022\022\n\nimageWidth\030\026 \001"
  "(\005\"\226\001\n\twheelUnit\022\022\n\ntime_stamp\030\001 \001(\002\022\017\n\007"
  "isStamp\030\002 \001(\010\022\r\n\005acc_x\030\003 \001(\002\022\r\n\005acc_y\030\004 "
  "\001(\002\022\r\n\005acc_z\030\005 \001(\002\022\021\n\tangular_x\030\006 \001(\002\022\021\n"
  "\tangular_y\030\007 \001(\002\022\021\n\tangular_z\030\010 \001(\002"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_carisPAWBuffers_2eproto = {
  false, InitDefaults_carisPAWBuffers_2eproto, 
  descriptor_table_protodef_carisPAWBuffers_2eproto,
  "carisPAWBuffers.proto", &assign_descriptors_table_carisPAWBuffers_2eproto, 635,
};

void AddDescriptors_carisPAWBuffers_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_carisPAWBuffers_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_carisPAWBuffers_2eproto = []() { AddDescriptors_carisPAWBuffers_2eproto(); return true; }();

// ===================================================================

void frameUnit::InitAsDefaultInstance() {
}
class frameUnit::HasBitSetters {
 public:
  static void set_has_time_stamp(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_isstamp(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_pitch(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_roll(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_heading(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_acc_x9250(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_acc_y9250(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_acc_z9250(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_angular_x9250(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_angular_y9250(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_angular_z9250(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_acc_x6050(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_acc_y6050(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_acc_z6050(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_angular_x6050(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_angular_y6050(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_angular_z6050(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_usensorforward(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_usensordownward(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_picamimage(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_imageheight(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_imagewidth(frameUnit* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int frameUnit::kTimeStampFieldNumber;
const int frameUnit::kIsStampFieldNumber;
const int frameUnit::kPitchFieldNumber;
const int frameUnit::kRollFieldNumber;
const int frameUnit::kHeadingFieldNumber;
const int frameUnit::kAccX9250FieldNumber;
const int frameUnit::kAccY9250FieldNumber;
const int frameUnit::kAccZ9250FieldNumber;
const int frameUnit::kAngularX9250FieldNumber;
const int frameUnit::kAngularY9250FieldNumber;
const int frameUnit::kAngularZ9250FieldNumber;
const int frameUnit::kAccX6050FieldNumber;
const int frameUnit::kAccY6050FieldNumber;
const int frameUnit::kAccZ6050FieldNumber;
const int frameUnit::kAngularX6050FieldNumber;
const int frameUnit::kAngularY6050FieldNumber;
const int frameUnit::kAngularZ6050FieldNumber;
const int frameUnit::kUSensorForwardFieldNumber;
const int frameUnit::kUSensorDownwardFieldNumber;
const int frameUnit::kPiCamImageFieldNumber;
const int frameUnit::kImageHeightFieldNumber;
const int frameUnit::kImageWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

frameUnit::frameUnit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frameUnit)
}
frameUnit::frameUnit(const frameUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  picamimage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_picamimage()) {
    picamimage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picamimage_);
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&imagewidth_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(imagewidth_));
  // @@protoc_insertion_point(copy_constructor:frameUnit)
}

void frameUnit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_frameUnit_carisPAWBuffers_2eproto.base);
  picamimage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imagewidth_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(imagewidth_));
}

frameUnit::~frameUnit() {
  // @@protoc_insertion_point(destructor:frameUnit)
  SharedDtor();
}

void frameUnit::SharedDtor() {
  picamimage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void frameUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const frameUnit& frameUnit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_frameUnit_carisPAWBuffers_2eproto.base);
  return *internal_default_instance();
}


void frameUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:frameUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    picamimage_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_y9250_) -
        reinterpret_cast<char*>(&time_stamp_)) + sizeof(acc_y9250_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&acc_z9250_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_x6050_) -
        reinterpret_cast<char*>(&acc_z9250_)) + sizeof(angular_x6050_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&angular_y6050_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imagewidth_) -
        reinterpret_cast<char*>(&angular_y6050_)) + sizeof(imagewidth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* frameUnit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<frameUnit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float time_stamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_time_stamp(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool isStamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_isstamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float pitch = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_pitch(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float roll = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_roll(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float heading = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_heading(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float acc_x9250 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_acc_x9250(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float acc_y9250 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_acc_y9250(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float acc_z9250 = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_acc_z9250(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float angular_x9250 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_angular_x9250(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float angular_y9250 = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_angular_y9250(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float angular_z9250 = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_angular_z9250(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float acc_x6050 = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_acc_x6050(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float acc_y6050 = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_acc_y6050(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float acc_z6050 = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_acc_z6050(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float angular_x6050 = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 125) goto handle_unusual;
        msg->set_angular_x6050(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float angular_y6050 = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 133) goto handle_unusual;
        msg->set_angular_y6050(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float angular_z6050 = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 141) goto handle_unusual;
        msg->set_angular_z6050(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float USensorForward = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 149) goto handle_unusual;
        msg->set_usensorforward(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float USensorDownward = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 157) goto handle_unusual;
        msg->set_usensordownward(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bytes piCamImage = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_picamimage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 imageHeight = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_imageheight(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 imageWidth = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_imagewidth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool frameUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frameUnit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_time_stamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isStamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_isstamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_pitch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roll = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_roll(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_heading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_x9250 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_acc_x9250(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_x9250_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_y9250 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_acc_y9250(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_y9250_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_z9250 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_acc_z9250(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_z9250_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_x9250 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_angular_x9250(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_x9250_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_y9250 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_angular_y9250(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_y9250_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_z9250 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_angular_z9250(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_z9250_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_x6050 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_acc_x6050(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_x6050_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_y6050 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_acc_y6050(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_y6050_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_z6050 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {
          HasBitSetters::set_has_acc_z6050(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_z6050_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_x6050 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (125 & 0xFF)) {
          HasBitSetters::set_has_angular_x6050(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_x6050_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_y6050 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (133 & 0xFF)) {
          HasBitSetters::set_has_angular_y6050(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_y6050_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_z6050 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (141 & 0xFF)) {
          HasBitSetters::set_has_angular_z6050(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_z6050_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float USensorForward = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (149 & 0xFF)) {
          HasBitSetters::set_has_usensorforward(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &usensorforward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float USensorDownward = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (157 & 0xFF)) {
          HasBitSetters::set_has_usensordownward(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &usensordownward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes piCamImage = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_picamimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imageHeight = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_imageheight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imageWidth = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_imagewidth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagewidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frameUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frameUnit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void frameUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frameUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_stamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time_stamp(), output);
  }

  // optional bool isStamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isstamp(), output);
  }

  // optional float pitch = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  // optional float roll = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  // optional float heading = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->heading(), output);
  }

  // optional float acc_x9250 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->acc_x9250(), output);
  }

  // optional float acc_y9250 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->acc_y9250(), output);
  }

  // optional float acc_z9250 = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->acc_z9250(), output);
  }

  // optional float angular_x9250 = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->angular_x9250(), output);
  }

  // optional float angular_y9250 = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->angular_y9250(), output);
  }

  // optional float angular_z9250 = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->angular_z9250(), output);
  }

  // optional float acc_x6050 = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->acc_x6050(), output);
  }

  // optional float acc_y6050 = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->acc_y6050(), output);
  }

  // optional float acc_z6050 = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->acc_z6050(), output);
  }

  // optional float angular_x6050 = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->angular_x6050(), output);
  }

  // optional float angular_y6050 = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->angular_y6050(), output);
  }

  // optional float angular_z6050 = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->angular_z6050(), output);
  }

  // optional float USensorForward = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->usensorforward(), output);
  }

  // optional float USensorDownward = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->usensordownward(), output);
  }

  // optional bytes piCamImage = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->picamimage(), output);
  }

  // optional int32 imageHeight = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->imageheight(), output);
  }

  // optional int32 imageWidth = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->imagewidth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frameUnit)
}

::google::protobuf::uint8* frameUnit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:frameUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_stamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time_stamp(), target);
  }

  // optional bool isStamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isstamp(), target);
  }

  // optional float pitch = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch(), target);
  }

  // optional float roll = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  // optional float heading = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->heading(), target);
  }

  // optional float acc_x9250 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->acc_x9250(), target);
  }

  // optional float acc_y9250 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->acc_y9250(), target);
  }

  // optional float acc_z9250 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->acc_z9250(), target);
  }

  // optional float angular_x9250 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->angular_x9250(), target);
  }

  // optional float angular_y9250 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->angular_y9250(), target);
  }

  // optional float angular_z9250 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->angular_z9250(), target);
  }

  // optional float acc_x6050 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->acc_x6050(), target);
  }

  // optional float acc_y6050 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->acc_y6050(), target);
  }

  // optional float acc_z6050 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->acc_z6050(), target);
  }

  // optional float angular_x6050 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->angular_x6050(), target);
  }

  // optional float angular_y6050 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->angular_y6050(), target);
  }

  // optional float angular_z6050 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->angular_z6050(), target);
  }

  // optional float USensorForward = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->usensorforward(), target);
  }

  // optional float USensorDownward = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->usensordownward(), target);
  }

  // optional bytes piCamImage = 20;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->picamimage(), target);
  }

  // optional int32 imageHeight = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->imageheight(), target);
  }

  // optional int32 imageWidth = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->imagewidth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frameUnit)
  return target;
}

size_t frameUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frameUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes piCamImage = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->picamimage());
    }

    // optional float time_stamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool isStamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float pitch = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float roll = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float heading = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float acc_x9250 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float acc_y9250 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float acc_z9250 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float angular_x9250 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float angular_y9250 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float angular_z9250 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float acc_x6050 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float acc_y6050 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float acc_z6050 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float angular_x6050 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional float angular_y6050 = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float angular_z6050 = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float USensorForward = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float USensorDownward = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 imageHeight = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imageheight());
    }

    // optional int32 imageWidth = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagewidth());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void frameUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frameUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const frameUnit* source =
      ::google::protobuf::DynamicCastToGenerated<frameUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frameUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frameUnit)
    MergeFrom(*source);
  }
}

void frameUnit::MergeFrom(const frameUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frameUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      picamimage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picamimage_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      isstamp_ = from.isstamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000010u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_x9250_ = from.acc_x9250_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_y9250_ = from.acc_y9250_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      acc_z9250_ = from.acc_z9250_;
    }
    if (cached_has_bits & 0x00000200u) {
      angular_x9250_ = from.angular_x9250_;
    }
    if (cached_has_bits & 0x00000400u) {
      angular_y9250_ = from.angular_y9250_;
    }
    if (cached_has_bits & 0x00000800u) {
      angular_z9250_ = from.angular_z9250_;
    }
    if (cached_has_bits & 0x00001000u) {
      acc_x6050_ = from.acc_x6050_;
    }
    if (cached_has_bits & 0x00002000u) {
      acc_y6050_ = from.acc_y6050_;
    }
    if (cached_has_bits & 0x00004000u) {
      acc_z6050_ = from.acc_z6050_;
    }
    if (cached_has_bits & 0x00008000u) {
      angular_x6050_ = from.angular_x6050_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      angular_y6050_ = from.angular_y6050_;
    }
    if (cached_has_bits & 0x00020000u) {
      angular_z6050_ = from.angular_z6050_;
    }
    if (cached_has_bits & 0x00040000u) {
      usensorforward_ = from.usensorforward_;
    }
    if (cached_has_bits & 0x00080000u) {
      usensordownward_ = from.usensordownward_;
    }
    if (cached_has_bits & 0x00100000u) {
      imageheight_ = from.imageheight_;
    }
    if (cached_has_bits & 0x00200000u) {
      imagewidth_ = from.imagewidth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void frameUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frameUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void frameUnit::CopyFrom(const frameUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frameUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool frameUnit::IsInitialized() const {
  return true;
}

void frameUnit::Swap(frameUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void frameUnit::InternalSwap(frameUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  picamimage_.Swap(&other->picamimage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_stamp_, other->time_stamp_);
  swap(isstamp_, other->isstamp_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(heading_, other->heading_);
  swap(acc_x9250_, other->acc_x9250_);
  swap(acc_y9250_, other->acc_y9250_);
  swap(acc_z9250_, other->acc_z9250_);
  swap(angular_x9250_, other->angular_x9250_);
  swap(angular_y9250_, other->angular_y9250_);
  swap(angular_z9250_, other->angular_z9250_);
  swap(acc_x6050_, other->acc_x6050_);
  swap(acc_y6050_, other->acc_y6050_);
  swap(acc_z6050_, other->acc_z6050_);
  swap(angular_x6050_, other->angular_x6050_);
  swap(angular_y6050_, other->angular_y6050_);
  swap(angular_z6050_, other->angular_z6050_);
  swap(usensorforward_, other->usensorforward_);
  swap(usensordownward_, other->usensordownward_);
  swap(imageheight_, other->imageheight_);
  swap(imagewidth_, other->imagewidth_);
}

::google::protobuf::Metadata frameUnit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_carisPAWBuffers_2eproto);
  return ::file_level_metadata_carisPAWBuffers_2eproto[kIndexInFileMessages];
}


// ===================================================================

void wheelUnit::InitAsDefaultInstance() {
}
class wheelUnit::HasBitSetters {
 public:
  static void set_has_time_stamp(wheelUnit* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_isstamp(wheelUnit* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_acc_x(wheelUnit* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_acc_y(wheelUnit* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_acc_z(wheelUnit* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_angular_x(wheelUnit* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_angular_y(wheelUnit* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_angular_z(wheelUnit* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int wheelUnit::kTimeStampFieldNumber;
const int wheelUnit::kIsStampFieldNumber;
const int wheelUnit::kAccXFieldNumber;
const int wheelUnit::kAccYFieldNumber;
const int wheelUnit::kAccZFieldNumber;
const int wheelUnit::kAngularXFieldNumber;
const int wheelUnit::kAngularYFieldNumber;
const int wheelUnit::kAngularZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

wheelUnit::wheelUnit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wheelUnit)
}
wheelUnit::wheelUnit(const wheelUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_z_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(angular_z_));
  // @@protoc_insertion_point(copy_constructor:wheelUnit)
}

void wheelUnit::SharedCtor() {
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_z_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(angular_z_));
}

wheelUnit::~wheelUnit() {
  // @@protoc_insertion_point(destructor:wheelUnit)
  SharedDtor();
}

void wheelUnit::SharedDtor() {
}

void wheelUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const wheelUnit& wheelUnit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_wheelUnit_carisPAWBuffers_2eproto.base);
  return *internal_default_instance();
}


void wheelUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:wheelUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_z_) -
        reinterpret_cast<char*>(&time_stamp_)) + sizeof(angular_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* wheelUnit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<wheelUnit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float time_stamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_time_stamp(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool isStamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_isstamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float acc_x = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_acc_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float acc_y = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_acc_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float acc_z = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_acc_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float angular_x = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_angular_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float angular_y = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_angular_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float angular_z = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_angular_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool wheelUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wheelUnit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_time_stamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isStamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_isstamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_acc_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_acc_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_acc_z(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_angular_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_angular_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_z = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_angular_z(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wheelUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wheelUnit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void wheelUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wheelUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time_stamp(), output);
  }

  // optional bool isStamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isstamp(), output);
  }

  // optional float acc_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->acc_x(), output);
  }

  // optional float acc_y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->acc_y(), output);
  }

  // optional float acc_z = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->acc_z(), output);
  }

  // optional float angular_x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->angular_x(), output);
  }

  // optional float angular_y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->angular_y(), output);
  }

  // optional float angular_z = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->angular_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wheelUnit)
}

::google::protobuf::uint8* wheelUnit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wheelUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time_stamp(), target);
  }

  // optional bool isStamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isstamp(), target);
  }

  // optional float acc_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->acc_x(), target);
  }

  // optional float acc_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->acc_y(), target);
  }

  // optional float acc_z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->acc_z(), target);
  }

  // optional float angular_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->angular_x(), target);
  }

  // optional float angular_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->angular_y(), target);
  }

  // optional float angular_z = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->angular_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wheelUnit)
  return target;
}

size_t wheelUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wheelUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float time_stamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool isStamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float acc_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float acc_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float acc_z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float angular_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float angular_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float angular_z = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void wheelUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wheelUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const wheelUnit* source =
      ::google::protobuf::DynamicCastToGenerated<wheelUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wheelUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wheelUnit)
    MergeFrom(*source);
  }
}

void wheelUnit::MergeFrom(const wheelUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wheelUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      isstamp_ = from.isstamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_x_ = from.acc_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      acc_y_ = from.acc_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_z_ = from.acc_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      angular_x_ = from.angular_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      angular_y_ = from.angular_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      angular_z_ = from.angular_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void wheelUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wheelUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wheelUnit::CopyFrom(const wheelUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wheelUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wheelUnit::IsInitialized() const {
  return true;
}

void wheelUnit::Swap(wheelUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void wheelUnit::InternalSwap(wheelUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_stamp_, other->time_stamp_);
  swap(isstamp_, other->isstamp_);
  swap(acc_x_, other->acc_x_);
  swap(acc_y_, other->acc_y_);
  swap(acc_z_, other->acc_z_);
  swap(angular_x_, other->angular_x_);
  swap(angular_y_, other->angular_y_);
  swap(angular_z_, other->angular_z_);
}

::google::protobuf::Metadata wheelUnit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_carisPAWBuffers_2eproto);
  return ::file_level_metadata_carisPAWBuffers_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::frameUnit* Arena::CreateMaybeMessage< ::frameUnit >(Arena* arena) {
  return Arena::CreateInternal< ::frameUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::wheelUnit* Arena::CreateMaybeMessage< ::wheelUnit >(Arena* arena) {
  return Arena::CreateInternal< ::wheelUnit >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
