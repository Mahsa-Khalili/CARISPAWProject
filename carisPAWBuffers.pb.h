// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carisPAWBuffers.proto

#ifndef PROTOBUF_INCLUDED_carisPAWBuffers_2eproto
#define PROTOBUF_INCLUDED_carisPAWBuffers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_carisPAWBuffers_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_carisPAWBuffers_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_carisPAWBuffers_2eproto();
class frameUnit;
class frameUnitDefaultTypeInternal;
extern frameUnitDefaultTypeInternal _frameUnit_default_instance_;
class wheelUnit;
class wheelUnitDefaultTypeInternal;
extern wheelUnitDefaultTypeInternal _wheelUnit_default_instance_;
namespace google {
namespace protobuf {
template<> ::frameUnit* Arena::CreateMaybeMessage<::frameUnit>(Arena*);
template<> ::wheelUnit* Arena::CreateMaybeMessage<::wheelUnit>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class frameUnit :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frameUnit) */ {
 public:
  frameUnit();
  virtual ~frameUnit();

  frameUnit(const frameUnit& from);

  inline frameUnit& operator=(const frameUnit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  frameUnit(frameUnit&& from) noexcept
    : frameUnit() {
    *this = ::std::move(from);
  }

  inline frameUnit& operator=(frameUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const frameUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const frameUnit* internal_default_instance() {
    return reinterpret_cast<const frameUnit*>(
               &_frameUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(frameUnit* other);
  friend void swap(frameUnit& a, frameUnit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline frameUnit* New() const final {
    return CreateMaybeMessage<frameUnit>(nullptr);
  }

  frameUnit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<frameUnit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const frameUnit& from);
  void MergeFrom(const frameUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(frameUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes piCamImage = 20;
  bool has_picamimage() const;
  void clear_picamimage();
  static const int kPiCamImageFieldNumber = 20;
  const ::std::string& picamimage() const;
  void set_picamimage(const ::std::string& value);
  #if LANG_CXX11
  void set_picamimage(::std::string&& value);
  #endif
  void set_picamimage(const char* value);
  void set_picamimage(const void* value, size_t size);
  ::std::string* mutable_picamimage();
  ::std::string* release_picamimage();
  void set_allocated_picamimage(::std::string* picamimage);

  // optional float time_stamp = 1;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  float time_stamp() const;
  void set_time_stamp(float value);

  // optional bool isStamp = 2;
  bool has_isstamp() const;
  void clear_isstamp();
  static const int kIsStampFieldNumber = 2;
  bool isstamp() const;
  void set_isstamp(bool value);

  // optional float pitch = 3;
  bool has_pitch() const;
  void clear_pitch();
  static const int kPitchFieldNumber = 3;
  float pitch() const;
  void set_pitch(float value);

  // optional float roll = 4;
  bool has_roll() const;
  void clear_roll();
  static const int kRollFieldNumber = 4;
  float roll() const;
  void set_roll(float value);

  // optional float heading = 5;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  float heading() const;
  void set_heading(float value);

  // optional float acc_x9250 = 6;
  bool has_acc_x9250() const;
  void clear_acc_x9250();
  static const int kAccX9250FieldNumber = 6;
  float acc_x9250() const;
  void set_acc_x9250(float value);

  // optional float acc_y9250 = 7;
  bool has_acc_y9250() const;
  void clear_acc_y9250();
  static const int kAccY9250FieldNumber = 7;
  float acc_y9250() const;
  void set_acc_y9250(float value);

  // optional float acc_z9250 = 8;
  bool has_acc_z9250() const;
  void clear_acc_z9250();
  static const int kAccZ9250FieldNumber = 8;
  float acc_z9250() const;
  void set_acc_z9250(float value);

  // optional float angular_x9250 = 9;
  bool has_angular_x9250() const;
  void clear_angular_x9250();
  static const int kAngularX9250FieldNumber = 9;
  float angular_x9250() const;
  void set_angular_x9250(float value);

  // optional float angular_y9250 = 10;
  bool has_angular_y9250() const;
  void clear_angular_y9250();
  static const int kAngularY9250FieldNumber = 10;
  float angular_y9250() const;
  void set_angular_y9250(float value);

  // optional float angular_z9250 = 11;
  bool has_angular_z9250() const;
  void clear_angular_z9250();
  static const int kAngularZ9250FieldNumber = 11;
  float angular_z9250() const;
  void set_angular_z9250(float value);

  // optional float acc_x6050 = 12;
  bool has_acc_x6050() const;
  void clear_acc_x6050();
  static const int kAccX6050FieldNumber = 12;
  float acc_x6050() const;
  void set_acc_x6050(float value);

  // optional float acc_y6050 = 13;
  bool has_acc_y6050() const;
  void clear_acc_y6050();
  static const int kAccY6050FieldNumber = 13;
  float acc_y6050() const;
  void set_acc_y6050(float value);

  // optional float acc_z6050 = 14;
  bool has_acc_z6050() const;
  void clear_acc_z6050();
  static const int kAccZ6050FieldNumber = 14;
  float acc_z6050() const;
  void set_acc_z6050(float value);

  // optional float angular_x6050 = 15;
  bool has_angular_x6050() const;
  void clear_angular_x6050();
  static const int kAngularX6050FieldNumber = 15;
  float angular_x6050() const;
  void set_angular_x6050(float value);

  // optional float angular_y6050 = 16;
  bool has_angular_y6050() const;
  void clear_angular_y6050();
  static const int kAngularY6050FieldNumber = 16;
  float angular_y6050() const;
  void set_angular_y6050(float value);

  // optional float angular_z6050 = 17;
  bool has_angular_z6050() const;
  void clear_angular_z6050();
  static const int kAngularZ6050FieldNumber = 17;
  float angular_z6050() const;
  void set_angular_z6050(float value);

  // optional float USensorForward = 18;
  bool has_usensorforward() const;
  void clear_usensorforward();
  static const int kUSensorForwardFieldNumber = 18;
  float usensorforward() const;
  void set_usensorforward(float value);

  // optional float USensorDownward = 19;
  bool has_usensordownward() const;
  void clear_usensordownward();
  static const int kUSensorDownwardFieldNumber = 19;
  float usensordownward() const;
  void set_usensordownward(float value);

  // optional int32 imageHeight = 21;
  bool has_imageheight() const;
  void clear_imageheight();
  static const int kImageHeightFieldNumber = 21;
  ::google::protobuf::int32 imageheight() const;
  void set_imageheight(::google::protobuf::int32 value);

  // optional int32 imageWidth = 22;
  bool has_imagewidth() const;
  void clear_imagewidth();
  static const int kImageWidthFieldNumber = 22;
  ::google::protobuf::int32 imagewidth() const;
  void set_imagewidth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:frameUnit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr picamimage_;
  float time_stamp_;
  bool isstamp_;
  float pitch_;
  float roll_;
  float heading_;
  float acc_x9250_;
  float acc_y9250_;
  float acc_z9250_;
  float angular_x9250_;
  float angular_y9250_;
  float angular_z9250_;
  float acc_x6050_;
  float acc_y6050_;
  float acc_z6050_;
  float angular_x6050_;
  float angular_y6050_;
  float angular_z6050_;
  float usensorforward_;
  float usensordownward_;
  ::google::protobuf::int32 imageheight_;
  ::google::protobuf::int32 imagewidth_;
  friend struct ::TableStruct_carisPAWBuffers_2eproto;
};
// -------------------------------------------------------------------

class wheelUnit :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wheelUnit) */ {
 public:
  wheelUnit();
  virtual ~wheelUnit();

  wheelUnit(const wheelUnit& from);

  inline wheelUnit& operator=(const wheelUnit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  wheelUnit(wheelUnit&& from) noexcept
    : wheelUnit() {
    *this = ::std::move(from);
  }

  inline wheelUnit& operator=(wheelUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const wheelUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const wheelUnit* internal_default_instance() {
    return reinterpret_cast<const wheelUnit*>(
               &_wheelUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(wheelUnit* other);
  friend void swap(wheelUnit& a, wheelUnit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline wheelUnit* New() const final {
    return CreateMaybeMessage<wheelUnit>(nullptr);
  }

  wheelUnit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<wheelUnit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const wheelUnit& from);
  void MergeFrom(const wheelUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(wheelUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float time_stamp = 1;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  float time_stamp() const;
  void set_time_stamp(float value);

  // optional bool isStamp = 2;
  bool has_isstamp() const;
  void clear_isstamp();
  static const int kIsStampFieldNumber = 2;
  bool isstamp() const;
  void set_isstamp(bool value);

  // optional float acc_x = 3;
  bool has_acc_x() const;
  void clear_acc_x();
  static const int kAccXFieldNumber = 3;
  float acc_x() const;
  void set_acc_x(float value);

  // optional float acc_y = 4;
  bool has_acc_y() const;
  void clear_acc_y();
  static const int kAccYFieldNumber = 4;
  float acc_y() const;
  void set_acc_y(float value);

  // optional float acc_z = 5;
  bool has_acc_z() const;
  void clear_acc_z();
  static const int kAccZFieldNumber = 5;
  float acc_z() const;
  void set_acc_z(float value);

  // optional float angular_x = 6;
  bool has_angular_x() const;
  void clear_angular_x();
  static const int kAngularXFieldNumber = 6;
  float angular_x() const;
  void set_angular_x(float value);

  // optional float angular_y = 7;
  bool has_angular_y() const;
  void clear_angular_y();
  static const int kAngularYFieldNumber = 7;
  float angular_y() const;
  void set_angular_y(float value);

  // optional float angular_z = 8;
  bool has_angular_z() const;
  void clear_angular_z();
  static const int kAngularZFieldNumber = 8;
  float angular_z() const;
  void set_angular_z(float value);

  // @@protoc_insertion_point(class_scope:wheelUnit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float time_stamp_;
  bool isstamp_;
  float acc_x_;
  float acc_y_;
  float acc_z_;
  float angular_x_;
  float angular_y_;
  float angular_z_;
  friend struct ::TableStruct_carisPAWBuffers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// frameUnit

// optional float time_stamp = 1;
inline bool frameUnit::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void frameUnit::clear_time_stamp() {
  time_stamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float frameUnit::time_stamp() const {
  // @@protoc_insertion_point(field_get:frameUnit.time_stamp)
  return time_stamp_;
}
inline void frameUnit::set_time_stamp(float value) {
  _has_bits_[0] |= 0x00000002u;
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.time_stamp)
}

// optional bool isStamp = 2;
inline bool frameUnit::has_isstamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void frameUnit::clear_isstamp() {
  isstamp_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool frameUnit::isstamp() const {
  // @@protoc_insertion_point(field_get:frameUnit.isStamp)
  return isstamp_;
}
inline void frameUnit::set_isstamp(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isstamp_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.isStamp)
}

// optional float pitch = 3;
inline bool frameUnit::has_pitch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void frameUnit::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float frameUnit::pitch() const {
  // @@protoc_insertion_point(field_get:frameUnit.pitch)
  return pitch_;
}
inline void frameUnit::set_pitch(float value) {
  _has_bits_[0] |= 0x00000008u;
  pitch_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.pitch)
}

// optional float roll = 4;
inline bool frameUnit::has_roll() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void frameUnit::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float frameUnit::roll() const {
  // @@protoc_insertion_point(field_get:frameUnit.roll)
  return roll_;
}
inline void frameUnit::set_roll(float value) {
  _has_bits_[0] |= 0x00000010u;
  roll_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.roll)
}

// optional float heading = 5;
inline bool frameUnit::has_heading() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void frameUnit::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float frameUnit::heading() const {
  // @@protoc_insertion_point(field_get:frameUnit.heading)
  return heading_;
}
inline void frameUnit::set_heading(float value) {
  _has_bits_[0] |= 0x00000020u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.heading)
}

// optional float acc_x9250 = 6;
inline bool frameUnit::has_acc_x9250() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void frameUnit::clear_acc_x9250() {
  acc_x9250_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float frameUnit::acc_x9250() const {
  // @@protoc_insertion_point(field_get:frameUnit.acc_x9250)
  return acc_x9250_;
}
inline void frameUnit::set_acc_x9250(float value) {
  _has_bits_[0] |= 0x00000040u;
  acc_x9250_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.acc_x9250)
}

// optional float acc_y9250 = 7;
inline bool frameUnit::has_acc_y9250() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void frameUnit::clear_acc_y9250() {
  acc_y9250_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float frameUnit::acc_y9250() const {
  // @@protoc_insertion_point(field_get:frameUnit.acc_y9250)
  return acc_y9250_;
}
inline void frameUnit::set_acc_y9250(float value) {
  _has_bits_[0] |= 0x00000080u;
  acc_y9250_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.acc_y9250)
}

// optional float acc_z9250 = 8;
inline bool frameUnit::has_acc_z9250() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void frameUnit::clear_acc_z9250() {
  acc_z9250_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float frameUnit::acc_z9250() const {
  // @@protoc_insertion_point(field_get:frameUnit.acc_z9250)
  return acc_z9250_;
}
inline void frameUnit::set_acc_z9250(float value) {
  _has_bits_[0] |= 0x00000100u;
  acc_z9250_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.acc_z9250)
}

// optional float angular_x9250 = 9;
inline bool frameUnit::has_angular_x9250() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void frameUnit::clear_angular_x9250() {
  angular_x9250_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float frameUnit::angular_x9250() const {
  // @@protoc_insertion_point(field_get:frameUnit.angular_x9250)
  return angular_x9250_;
}
inline void frameUnit::set_angular_x9250(float value) {
  _has_bits_[0] |= 0x00000200u;
  angular_x9250_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.angular_x9250)
}

// optional float angular_y9250 = 10;
inline bool frameUnit::has_angular_y9250() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void frameUnit::clear_angular_y9250() {
  angular_y9250_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float frameUnit::angular_y9250() const {
  // @@protoc_insertion_point(field_get:frameUnit.angular_y9250)
  return angular_y9250_;
}
inline void frameUnit::set_angular_y9250(float value) {
  _has_bits_[0] |= 0x00000400u;
  angular_y9250_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.angular_y9250)
}

// optional float angular_z9250 = 11;
inline bool frameUnit::has_angular_z9250() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void frameUnit::clear_angular_z9250() {
  angular_z9250_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float frameUnit::angular_z9250() const {
  // @@protoc_insertion_point(field_get:frameUnit.angular_z9250)
  return angular_z9250_;
}
inline void frameUnit::set_angular_z9250(float value) {
  _has_bits_[0] |= 0x00000800u;
  angular_z9250_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.angular_z9250)
}

// optional float acc_x6050 = 12;
inline bool frameUnit::has_acc_x6050() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void frameUnit::clear_acc_x6050() {
  acc_x6050_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float frameUnit::acc_x6050() const {
  // @@protoc_insertion_point(field_get:frameUnit.acc_x6050)
  return acc_x6050_;
}
inline void frameUnit::set_acc_x6050(float value) {
  _has_bits_[0] |= 0x00001000u;
  acc_x6050_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.acc_x6050)
}

// optional float acc_y6050 = 13;
inline bool frameUnit::has_acc_y6050() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void frameUnit::clear_acc_y6050() {
  acc_y6050_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float frameUnit::acc_y6050() const {
  // @@protoc_insertion_point(field_get:frameUnit.acc_y6050)
  return acc_y6050_;
}
inline void frameUnit::set_acc_y6050(float value) {
  _has_bits_[0] |= 0x00002000u;
  acc_y6050_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.acc_y6050)
}

// optional float acc_z6050 = 14;
inline bool frameUnit::has_acc_z6050() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void frameUnit::clear_acc_z6050() {
  acc_z6050_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float frameUnit::acc_z6050() const {
  // @@protoc_insertion_point(field_get:frameUnit.acc_z6050)
  return acc_z6050_;
}
inline void frameUnit::set_acc_z6050(float value) {
  _has_bits_[0] |= 0x00004000u;
  acc_z6050_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.acc_z6050)
}

// optional float angular_x6050 = 15;
inline bool frameUnit::has_angular_x6050() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void frameUnit::clear_angular_x6050() {
  angular_x6050_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float frameUnit::angular_x6050() const {
  // @@protoc_insertion_point(field_get:frameUnit.angular_x6050)
  return angular_x6050_;
}
inline void frameUnit::set_angular_x6050(float value) {
  _has_bits_[0] |= 0x00008000u;
  angular_x6050_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.angular_x6050)
}

// optional float angular_y6050 = 16;
inline bool frameUnit::has_angular_y6050() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void frameUnit::clear_angular_y6050() {
  angular_y6050_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float frameUnit::angular_y6050() const {
  // @@protoc_insertion_point(field_get:frameUnit.angular_y6050)
  return angular_y6050_;
}
inline void frameUnit::set_angular_y6050(float value) {
  _has_bits_[0] |= 0x00010000u;
  angular_y6050_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.angular_y6050)
}

// optional float angular_z6050 = 17;
inline bool frameUnit::has_angular_z6050() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void frameUnit::clear_angular_z6050() {
  angular_z6050_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float frameUnit::angular_z6050() const {
  // @@protoc_insertion_point(field_get:frameUnit.angular_z6050)
  return angular_z6050_;
}
inline void frameUnit::set_angular_z6050(float value) {
  _has_bits_[0] |= 0x00020000u;
  angular_z6050_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.angular_z6050)
}

// optional float USensorForward = 18;
inline bool frameUnit::has_usensorforward() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void frameUnit::clear_usensorforward() {
  usensorforward_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float frameUnit::usensorforward() const {
  // @@protoc_insertion_point(field_get:frameUnit.USensorForward)
  return usensorforward_;
}
inline void frameUnit::set_usensorforward(float value) {
  _has_bits_[0] |= 0x00040000u;
  usensorforward_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.USensorForward)
}

// optional float USensorDownward = 19;
inline bool frameUnit::has_usensordownward() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void frameUnit::clear_usensordownward() {
  usensordownward_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float frameUnit::usensordownward() const {
  // @@protoc_insertion_point(field_get:frameUnit.USensorDownward)
  return usensordownward_;
}
inline void frameUnit::set_usensordownward(float value) {
  _has_bits_[0] |= 0x00080000u;
  usensordownward_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.USensorDownward)
}

// optional bytes piCamImage = 20;
inline bool frameUnit::has_picamimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void frameUnit::clear_picamimage() {
  picamimage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& frameUnit::picamimage() const {
  // @@protoc_insertion_point(field_get:frameUnit.piCamImage)
  return picamimage_.GetNoArena();
}
inline void frameUnit::set_picamimage(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  picamimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frameUnit.piCamImage)
}
#if LANG_CXX11
inline void frameUnit::set_picamimage(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  picamimage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frameUnit.piCamImage)
}
#endif
inline void frameUnit::set_picamimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  picamimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frameUnit.piCamImage)
}
inline void frameUnit::set_picamimage(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  picamimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frameUnit.piCamImage)
}
inline ::std::string* frameUnit::mutable_picamimage() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:frameUnit.piCamImage)
  return picamimage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* frameUnit::release_picamimage() {
  // @@protoc_insertion_point(field_release:frameUnit.piCamImage)
  if (!has_picamimage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return picamimage_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void frameUnit::set_allocated_picamimage(::std::string* picamimage) {
  if (picamimage != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  picamimage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picamimage);
  // @@protoc_insertion_point(field_set_allocated:frameUnit.piCamImage)
}

// optional int32 imageHeight = 21;
inline bool frameUnit::has_imageheight() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void frameUnit::clear_imageheight() {
  imageheight_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::int32 frameUnit::imageheight() const {
  // @@protoc_insertion_point(field_get:frameUnit.imageHeight)
  return imageheight_;
}
inline void frameUnit::set_imageheight(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  imageheight_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.imageHeight)
}

// optional int32 imageWidth = 22;
inline bool frameUnit::has_imagewidth() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void frameUnit::clear_imagewidth() {
  imagewidth_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::int32 frameUnit::imagewidth() const {
  // @@protoc_insertion_point(field_get:frameUnit.imageWidth)
  return imagewidth_;
}
inline void frameUnit::set_imagewidth(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  imagewidth_ = value;
  // @@protoc_insertion_point(field_set:frameUnit.imageWidth)
}

// -------------------------------------------------------------------

// wheelUnit

// optional float time_stamp = 1;
inline bool wheelUnit::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wheelUnit::clear_time_stamp() {
  time_stamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float wheelUnit::time_stamp() const {
  // @@protoc_insertion_point(field_get:wheelUnit.time_stamp)
  return time_stamp_;
}
inline void wheelUnit::set_time_stamp(float value) {
  _has_bits_[0] |= 0x00000001u;
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:wheelUnit.time_stamp)
}

// optional bool isStamp = 2;
inline bool wheelUnit::has_isstamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wheelUnit::clear_isstamp() {
  isstamp_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool wheelUnit::isstamp() const {
  // @@protoc_insertion_point(field_get:wheelUnit.isStamp)
  return isstamp_;
}
inline void wheelUnit::set_isstamp(bool value) {
  _has_bits_[0] |= 0x00000002u;
  isstamp_ = value;
  // @@protoc_insertion_point(field_set:wheelUnit.isStamp)
}

// optional float acc_x = 3;
inline bool wheelUnit::has_acc_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wheelUnit::clear_acc_x() {
  acc_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float wheelUnit::acc_x() const {
  // @@protoc_insertion_point(field_get:wheelUnit.acc_x)
  return acc_x_;
}
inline void wheelUnit::set_acc_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  acc_x_ = value;
  // @@protoc_insertion_point(field_set:wheelUnit.acc_x)
}

// optional float acc_y = 4;
inline bool wheelUnit::has_acc_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wheelUnit::clear_acc_y() {
  acc_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float wheelUnit::acc_y() const {
  // @@protoc_insertion_point(field_get:wheelUnit.acc_y)
  return acc_y_;
}
inline void wheelUnit::set_acc_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  acc_y_ = value;
  // @@protoc_insertion_point(field_set:wheelUnit.acc_y)
}

// optional float acc_z = 5;
inline bool wheelUnit::has_acc_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wheelUnit::clear_acc_z() {
  acc_z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float wheelUnit::acc_z() const {
  // @@protoc_insertion_point(field_get:wheelUnit.acc_z)
  return acc_z_;
}
inline void wheelUnit::set_acc_z(float value) {
  _has_bits_[0] |= 0x00000010u;
  acc_z_ = value;
  // @@protoc_insertion_point(field_set:wheelUnit.acc_z)
}

// optional float angular_x = 6;
inline bool wheelUnit::has_angular_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wheelUnit::clear_angular_x() {
  angular_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float wheelUnit::angular_x() const {
  // @@protoc_insertion_point(field_get:wheelUnit.angular_x)
  return angular_x_;
}
inline void wheelUnit::set_angular_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  angular_x_ = value;
  // @@protoc_insertion_point(field_set:wheelUnit.angular_x)
}

// optional float angular_y = 7;
inline bool wheelUnit::has_angular_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wheelUnit::clear_angular_y() {
  angular_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float wheelUnit::angular_y() const {
  // @@protoc_insertion_point(field_get:wheelUnit.angular_y)
  return angular_y_;
}
inline void wheelUnit::set_angular_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  angular_y_ = value;
  // @@protoc_insertion_point(field_set:wheelUnit.angular_y)
}

// optional float angular_z = 8;
inline bool wheelUnit::has_angular_z() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void wheelUnit::clear_angular_z() {
  angular_z_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float wheelUnit::angular_z() const {
  // @@protoc_insertion_point(field_get:wheelUnit.angular_z)
  return angular_z_;
}
inline void wheelUnit::set_angular_z(float value) {
  _has_bits_[0] |= 0x00000080u;
  angular_z_ = value;
  // @@protoc_insertion_point(field_set:wheelUnit.angular_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_carisPAWBuffers_2eproto
